Description	Resource	Path	Location	Type
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	main.c	/Stop_Watch_Project	line 20	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 33	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 40	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 45	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 46	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 49	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 53	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 54	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 62	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 68	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 69	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 281	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 284	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 287	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 290	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 293	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 296	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 315	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 318	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 323	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 326	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 331	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 334	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 339	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 342	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 347	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 350	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 356	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 359	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 381	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 382	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 383	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 384	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 389	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 390	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 391	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 392	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 397	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 398	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 399	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 400	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 405	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 406	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 407	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 408	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 413	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 414	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 415	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 416	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 422	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 423	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 424	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 425	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 442	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 445	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 448	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 451	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 454	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Stop_Watch_Project	line 457	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 114	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 117	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 155	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 187	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 190	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 191	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 193	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 194	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 197	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 200	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 234	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 118	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 123	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 110	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 107	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 126	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 102	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 131	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 94	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 68	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 134	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 67	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 93	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 109	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 117	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 125	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 133	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 88	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	GPIO.c	/Stop_Watch_Project	line 147	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 53	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 46	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 45	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 148	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 39	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 185	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 38	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 30	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 188	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 188	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 193	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 193	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 185	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 165	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 162	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 201	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 201	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 159	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 204	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 204	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 156	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 153	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 209	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 209	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 150	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 212	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 212	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 134	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 131	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 217	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 217	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 126	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 220	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 220	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 123	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 118	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 225	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 225	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 228	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 228	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 110	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 107	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 187	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 195	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 203	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 211	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 219	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 227	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 182	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 245	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 248	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 251	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 254	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 257	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 260	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 243	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 281	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 281	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 102	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 284	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 284	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 94	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 287	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 287	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 70	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 290	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 290	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 69	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 68	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 293	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 293	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 67	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 63	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 296	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 296	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 62	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 61	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 279	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 315	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 315	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 318	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 318	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 323	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 323	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 56	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 326	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 326	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 55	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 331	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 331	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 54	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 334	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 334	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 53	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 339	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 339	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 342	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 342	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 49	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 347	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 347	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 350	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 350	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 356	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 356	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 46	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 359	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	GPIO.c	/Stop_Watch_Project	line 359	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 45	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 317	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 325	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 333	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 341	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 349	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 358	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 312	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 381	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 42	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 382	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 41	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 383	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 40	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 384	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 39	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 385	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 385	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 38	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 389	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 33	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 390	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 391	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 392	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 30	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 393	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 393	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 397	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 228	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 398	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 220	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 399	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 212	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 400	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 204	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 401	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 401	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 405	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 188	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 406	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 131	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 407	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 123	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 408	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 409	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 409	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 107	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 413	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 414	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 415	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 409	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 416	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 401	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 417	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 417	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 417	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 422	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 393	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 423	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 385	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 424	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 296	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 425	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 293	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 426	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 426	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 426	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 378	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 442	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 442	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 442	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 290	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 445	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 445	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 445	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 287	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 448	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 448	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 448	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 284	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 451	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 451	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 451	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 281	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 454	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 454	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 454	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 228	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPIO.c	/Stop_Watch_Project	line 457	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 457	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 457	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 225	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 440	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 473	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 473	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 473	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 473	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 476	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 476	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 476	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 481	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 481	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 481	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 481	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 484	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 484	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 484	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 489	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 489	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 489	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 489	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 492	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 492	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 492	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 497	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 497	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 497	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 497	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 500	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 500	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 500	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 505	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 505	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 505	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 505	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 508	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 508	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 508	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 513	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 513	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 513	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Stop_Watch_Project	line 513	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 516	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 516	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 516	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 475	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 483	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 491	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 499	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 507	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 515	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 470	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 534	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 534	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 534	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 537	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 537	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 537	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 540	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 540	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 540	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 545	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 545	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 545	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 548	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 548	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 548	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 551	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 551	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 551	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 556	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 556	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 556	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 559	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 559	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 559	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 562	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 562	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 562	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 567	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 567	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 567	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 570	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 570	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 570	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 573	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 573	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 573	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 578	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 578	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 578	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 581	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 581	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 581	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 584	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 584	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 584	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 589	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 589	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 589	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 592	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 592	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 592	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 595	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 595	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 595	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 539	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 550	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 561	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 572	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 583	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 594	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 531	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 613	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 613	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 613	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 616	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 616	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 616	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 619	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 619	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 619	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 624	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 624	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 624	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 627	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 627	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 627	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 630	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 630	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 630	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 635	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 635	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 635	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 638	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 638	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 638	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 641	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 641	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 641	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 646	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 646	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 646	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 649	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 649	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 649	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 652	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 652	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 652	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 657	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 657	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 657	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 660	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 660	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 660	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 663	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 663	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 663	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 668	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 668	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 668	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 671	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 671	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 671	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Stop_Watch_Project	line 674	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Stop_Watch_Project	line 674	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 674	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 618	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 629	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 640	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 651	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 662	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPIO.c	/Stop_Watch_Project	line 673	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPIO.c	/Stop_Watch_Project	line 610	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	lcd.c	/Stop_Watch_Project	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 220	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	lcd.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	lcd.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	lcd.c	/Stop_Watch_Project	line 32	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 44	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 217	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 212	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 73	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 209	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 74	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 204	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 75	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 76	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 201	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 77	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 98	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 114	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 114	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 193	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 188	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 116	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 117	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 117	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 185	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 118	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 138	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 139	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	lcd.c	/Stop_Watch_Project	line 140	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 134	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 141	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	lcd.c	/Stop_Watch_Project	line 154	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	lcd.c	/Stop_Watch_Project	line 155	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 131	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	lcd.c	/Stop_Watch_Project	line 156	C/C++ Problem
#1485-D (MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	lcd.c	/Stop_Watch_Project	line 156	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	lcd.c	/Stop_Watch_Project	line 157	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 170	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 123	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 118	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 102	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	lcd.c	/Stop_Watch_Project	line 200	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	lcd.c	/Stop_Watch_Project	line 200	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	lcd.c	/Stop_Watch_Project	line 186	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 94	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	lcd.c	/Stop_Watch_Project	line 235	C/C++ Problem
#1485-D (MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	lcd.c	/Stop_Watch_Project	line 238	C/C++ Problem
#1485-D (MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	lcd.c	/Stop_Watch_Project	line 239	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	lcd.c	/Stop_Watch_Project	line 251	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	lcd.c	/Stop_Watch_Project	line 255	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	lcd.c	/Stop_Watch_Project	line 257	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	lcd.c	/Stop_Watch_Project	line 257	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 259	C/C++ Problem
#1485-D (MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	lcd.c	/Stop_Watch_Project	line 259	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	lcd.c	/Stop_Watch_Project	line 259	C/C++ Problem
#1485-D (MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	lcd.c	/Stop_Watch_Project	line 261	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 102	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	main.c	/Stop_Watch_Project	line 113	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	main.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	main.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	main.c	/Stop_Watch_Project	line 20	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	lcd.c	/Stop_Watch_Project	line 255	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 26	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 28	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 33	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 34	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 36	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	main.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 48	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 49	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 53	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	main.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 61	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 72	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 75	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 77	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 79	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	main.c	/Stop_Watch_Project	line 79	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 79	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	main.c	/Stop_Watch_Project	line 79	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 80	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 88	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	main.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 92	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 96	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 97	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 98	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	main.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	main.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 5	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 6	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 7	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 8	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 9	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 10	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	systick.c	/Stop_Watch_Project	line 26	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	systick.c	/Stop_Watch_Project	line 26	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 26	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	systick.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	systick.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	systick.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 27	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	systick.c	/Stop_Watch_Project	line 28	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	systick.c	/Stop_Watch_Project	line 28	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 28	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	systick.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	systick.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1406-D (MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	systick.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 40	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 43	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 45	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 46	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 47	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 49	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 53	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 54	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 58	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 62	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 66	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 68	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	systick.c	/Stop_Watch_Project	line 69	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	systick.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	systick.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	systick.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 71	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ResetISR")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 73	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "NmiSR")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 74	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "FaultISR")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 75	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 76	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 77	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 78	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 79	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 80	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 81	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 82	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 83	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 85	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 86	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "Systick_Handler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 87	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 88	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 89	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 90	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 91	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 92	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 93	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 94	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 95	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 96	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 97	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 98	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 99	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 100	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 101	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 102	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 103	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 104	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 105	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 106	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 107	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 108	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 109	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 110	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 111	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 112	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 113	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 114	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 115	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 116	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 117	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 118	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 119	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 120	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 121	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 122	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 123	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 124	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 125	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 126	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 127	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 129	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 130	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 131	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 132	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 133	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 134	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 135	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 136	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 137	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 138	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 139	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 140	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 141	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 142	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 143	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 144	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 145	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 146	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 147	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 148	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 149	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 150	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 151	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 152	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 153	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 154	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 155	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 156	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 157	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 158	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 159	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 160	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 161	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 162	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 163	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 164	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 165	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 166	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 167	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 168	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 170	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 172	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 173	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 174	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 175	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 176	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 177	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 178	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 179	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 180	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 181	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 182	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 183	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 184	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 185	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 186	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 187	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 188	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 189	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 190	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 191	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 192	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 193	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 194	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 195	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 196	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 197	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 198	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 199	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 200	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 201	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 202	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 203	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 204	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 205	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 206	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 207	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 208	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 209	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 210	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 211	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 212	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 213	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 214	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 215	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 216	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 217	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 218	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 219	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 220	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 221	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 222	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 223	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 224	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 225	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Stop_Watch_Project	line 226	C/C++ Problem
